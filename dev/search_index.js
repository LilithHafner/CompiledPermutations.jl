var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CompiledPermutations","category":"page"},{"location":"#CompiledPermutations.jl","page":"Home","title":"CompiledPermutations.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CompiledPermutations is a micro-package which provides a function compile_permutation! that compiles a given permutation so that it can be efficiently applied multiple times using permute!. This is useful if you would like to permute several AbstractVectors in the same manner. For example, when sorting a DataFrame, StructArray, or similar data structure.","category":"page"},{"location":"","page":"Home","title":"Home","text":"compile_permutation!\ncompile_inverse_permutation!","category":"page"},{"location":"#CompiledPermutations.compile_permutation!","page":"Home","title":"CompiledPermutations.compile_permutation!","text":"compile_permutation!(p::AbstractVector{<:Integer}) -> cp\n\nConvert a permutation p into a compiled permutation cp which can be efficiently applied with permute!(v, cp).\n\npermute!(v, compiled_permutation!(p))) produces the same result as permute!(v, p) and is often less efficient. This function is useful when the same permutation is applied to many vectors.\n\nnote: Note\ncompile_permutation! may mangle p and/or return an object which shares memory with p. Use compile_permutation!(copy(p)) if you would like to avoid this.\n\nExample\n\njulia> cp = compile_permutation!([2, 3, 1]);\n\njulia> v = [:a, :b, :c];\n\njulia> permute!(v, cp)\n3-element Vector{Symbol}:\n :b\n :c\n :a\n\nHere is an example where this function provides performance benefits:\n\njulia> perm = randperm(1000); data = [rand(1000) for _ in 1:30];\n\njulia> @btime for x in $data; permute!(x, $perm); end\n  25.917 μs (30 allocations: 238.12 KiB)\n\njulia> @btime (cp = compile_permutation!(copy($perm)); for x in $data; permute!(x, cp); end)\n  16.708 μs (2 allocations: 15.88 KiB)\n\n\n\n\n\n","category":"function"},{"location":"#CompiledPermutations.compile_inverse_permutation!","page":"Home","title":"CompiledPermutations.compile_inverse_permutation!","text":"compile_inverse_permutation!(p::AbstractVector{<:Integer}) -> cp\n\nEquivalent to compile_permutation!(invperm(p)), though possibly more efficient.\n\n\n\n\n\n","category":"function"}]
}
